Ground rules:
1. COMMENT ALL YOUR CHANGES IN BOTH CODE AND PLAN.TXT
2. don't be an asshole >:3

Plan:
-Have a function that parses the input file
    -have the data be converted into an object
    -basically a map of each node with their connections (adjacent)
        -a node should be its own object with:
            -a name
            -a list of its adjacent nodes
            -a color
-Fill out a map
    -each region in the given map has a color node
    -go through each node and select a color to paint it based on the CSP
-Have a way to fetch the next node
    -first with minimum remaining values, aka the nodes with the least number of values available
    -second with the degree heuristic, aka least number of adjacent nodes (i think, double check)
    -afterwards, if there are any ties, just pick one randomly
-Foward checking: just recursively check if there's a dead end??????
-Use next() and forward checking to output final map
-ACTUAL ALGO PLAN:
    -we start with a list of all nodes
    -we then select a node
        -we use the MRV and Degree heuristics to determine which node
    -we select a value for that node
        -we check to see what values are legal, and pick one
    -we check to see if all other nodes are still assignable
        -after choosing a value for the current node
        -if we find that one or more nodes can no longer be assigned, then we go back and pick another value
            -as a recursive function, this is where we would return false
        -also, if we find that there are no other nodes to be assigned, then we found an answer, and we return that answer
    -repeat by selecting another node
    -Recap: The recursive function will be structed as this:
        -check if other nodes are valid -> choose a node -> loop over each possible value of that node -> call recursively with that node/value pair